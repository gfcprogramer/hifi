<!
//  Material.slh
//  fragment shader
//
//  Created by Sam Gateau on 12/16/14.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MATERIAL_SLH@>
<@def MATERIAL_SLH@>

struct Material { 
    vec4 _diffuse;
    vec4 _specular;

};

float getMaterialOpacity(Material m) { return m._diffuse.a; }
vec3 getMaterialDiffuse(Material m) { return m._diffuse.rgb; }
vec3 getMaterialSpecular(Material m) { return m._specular.rgb; }
float getMaterialShininess(Material m) { return m._specular.a; }



<@if GLPROFILE == PC_GL@>
uniform materialBuffer {
    Material mat;
};
Material getMaterial() {
    return mat;
}
<@elif GLPROFILE == MAC_GL@>
uniform vec4 materialBuffer[2];
Material getMaterial() {
    Material mat;
    mat._diffuse = materialBuffer[0];
    mat._specular = materialBuffer[1];
    return mat;
}
<!/* tryed and failed...
   bindable uniform struct {
   Material mat;
   } materialBuffer;
   
   Material getMaterial() {
   return materialBuffer.mat;
   }
   */!>
<@else@>
uniform vec4 materialBuffer[2];
Material getMaterial() {
    Material mat;
    mat._diffuse = materialBuffer[0];
    mat._specular = materialBuffer[1];
    return mat;    
}
<@endif@>



<@endif@>
